  /*
    //对成员函数进行强制转换
    FFF callback = &PlayVoice::thread_task;//强制转换func()的类型
    unsigned int temp = *((unsigned int*)&callback);
    start_thread(*(Funn)&temp, 0, &play_tid);

    Funn callback = (Funn)(&PlayVoice::thread_task);//强制转换func()的类型
    start_thread(callback, 0, &play_tid);
    */


typedef void *(PlayVoice::*FFF)(void *);


    if(!strcmp(type,"mplayer")) { //使用mplayer播放
        sprintf(temp, "%s -volume %d %s > /dev/null",type,volume,fileName);
    } else if(!strcmp(type,"play")) {//使用sox播放
       sprintf(temp, "%s -v %3f %s > /dev/null",type,volume/100.0,fileName);





    //互斥锁
    pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

   if(pthread_mutex_init(&mutex,NULL) !=0) {
            printf("mutex init error\n");
        }



 /**
     * @brief lock
     * 加锁
     */
    void lock() {
        pthread_mutex_lock(&mutex);
    }

    /**
     * @brief unlock
     * 解锁
     */
    void unlock() {
        pthread_mutex_unlock(&mutex);
    }


  static void *task(void *args) {
        /*
        此方法强制转换失败
        //只能转化可以隐式转化的类型，如double可以隐式转化为int，派生类指针可以隐式转化为基类指针，但是基类指针转化为派生类指针就会报错
        PlayVoice* some = static_cast<PlayVoice*>(args);//转换后得到副本
        if(some == NULL) {
            printf("thread null\n");
            return NULL;
        }
        printf("thread_task\n");
        return some->thread_task(args);
        */
        return p->thread_task(args);
    }


/*
回调函数只能是全局的或是静态的(普通的C++成员函数都隐含“this”指针作为参数)

c语言回调成员函数的方法有：
1.回调函数在类外定义为全局函数
2.回调函数在类中定义为静态函数
3.强制转换成员函数
Funn callback = (Funn)&PlayVoice::thread_task;//强制转换thread_task()的类型
//对于非虚函数，返回其在内存的真实地址
//对于虚函数， 返回其在虚函数表的偏移位置
4.回调函数为静态函数，在静态函数中调用成员函数
5.通过模板
template<class T, void (T::*method)()>
void *method_thunk(void *pArgs)
{
    (static_cast<T *>(pArgs)->*method)();
}

template<class T>
void *method_thunk(void *pArgs)
{
    method_thunk<T, &T::operator()>(pArgs);
}

pthread_create(&pid1, nullptr, method_thunk<Other>, &other);
pthread_create(&pid2, nullptr, method_thunk<Other, &Other::doSomething>, &other);
*/



  printf("%s错误出现在第%d行",__FUNCTION__,__LINE__);
        printf("%s:%s\n",__func__,strerror(err));
    }

    if(isWait){
        //主线程等待子线程完成
        err = pthread_join(tid, NULL);
    //    pthread_timedjoin_np(tid, &rvall, 1000);//等待线程结束，设置超时
        if(err != 0){
            printf("%s:%s\n",__func__,strerror(err));




 	#include <cstdio>
	#include <cstring>
	#include <cstdlib>
	#include <arpa/inet.h>
	#include <string>
	#include <fstream>
	 
	static int getCpuSerialByAsm(std::string & cpu_id) { 
	    unsigned int s1 = 0;
	    unsigned int s2 = 0;
	    asm volatile (
	        "movl $0x01, %%eax; \n\t"
	        "xorl %%edx, %%edx; \n\t"
	        "cpuid; \n\t"
	        "movl %%edx, %0; \n\t"
	        "movl %%eax, %1; \n\t"
	        : "=m"(s1), "=m"(s2)
	    );
	
	    if(0 == s1 && 0 == s2) {
	        return -1;
	    }
	
	    char cpu[32] = { 0 };
	    snprintf(cpu, sizeof(cpu), "%08X%08X", htonl(s2), htonl(s1));
	    std::string(cpu).swap(cpu_id);
	
	    return(true);
	}
	
	static void parse_cpu_id(const char * file_name, const char * match_words, std::string & cpu_id) {
	    cpu_id.c_str();
	
	    std::ifstream ifs(file_name, std::ios::binary);
	    if (!ifs.is_open()) {
	        return;
	    }
	
	    char line[4096] = { 0 };
	    while (!ifs.eof()) {
	        ifs.getline(line, sizeof(line));
	        if (!ifs.good()) {
	            break;
	        }
	
	        const char * cpu = strstr(line, match_words);
	        if (NULL == cpu) {
	            continue;
	        }
	        cpu += strlen(match_words);
	
	        while ('\0' != cpu[0]) {
	            if (' ' != cpu[0]) {
	                cpu_id.push_back(cpu[0]);
	            }
	            ++cpu;
	        }
	
	        if (!cpu_id.empty()) {
	            break;
	        }
	    }
	
	    ifs.close();
	}
	
	static bool get_cpu_id_by_system(std::string & cpu_id) {
	    cpu_id.c_str();
	
	    const char * dmidecode_result = ".dmidecode_result.txt";
	    char command[512] = { 0 };
	    snprintf(command, sizeof(command), "dmidecode -t 4 | grep ID > %s", dmidecode_result);
	
	    if (0 == system(command))
	    {
	        parse_cpu_id(dmidecode_result, "ID:", cpu_id);
	    }
	
	    unlink(dmidecode_result);
	
	    return(!cpu_id.empty());
	}




/*****************************************************************************
  i2c读函数，参数1：从设备地址，参数2：寄存器地址，参数3：读取数据缓冲区，参数4：读取数据大小
******************************************************************************/
unsigned char _i2c_read(unsigned char device_addr, unsigned char sub_addr, unsigned char *buff, int ByteNo)
{
    int fd, ret;
    unsigned char buftmp[32];
    struct i2c_rdwr_ioctl_data i2c_data;
    const char      *i2c_dev = "/dev/i2c-0";
    // ----------------------------------

    device_addr >>= 1;
    // init
    fd = open(i2c_dev, O_RDWR);
    if (fd<0)
    {
        printf("not have /dev/i2c-0 t\r\n");
        return -1;
    }

    i2c_data.nmsgs = 2;
    i2c_data.msgs = (struct i2c_msg *)malloc(i2c_data.nmsgs *sizeof(struct i2c_msg));
    if (i2c_data.msgs == NULL)
    {
        printf("malloc error");
        close(fd);
        return -1;
    }

    ioctl(fd, I2C_TIMEOUT, 1);
    ioctl(fd, I2C_RETRIES, 2);

    // write reg
    memset(buftmp, 0, 32);
    buftmp[0] = sub_addr;
    i2c_data.msgs[0].len = 1;
    i2c_data.msgs[0].addr = device_addr;
    i2c_data.msgs[0].flags = 0;     //  0: write 1:read
    i2c_data.msgs[0].buf = buftmp;
    // read data
    i2c_data.msgs[1].len = ByteNo;
    i2c_data.msgs[1].addr = device_addr;
    i2c_data.msgs[1].flags = 1;     //  0: write 1:read
    i2c_data.msgs[1].buf = buff;


    ret = ioctl(fd, I2C_RDWR, (unsigned long)&i2c_data);
    if (ret < 0)
    {
        printf("read data %x %x error\r\n", device_addr, sub_addr);
        close(fd);
        free(i2c_data.msgs);
        return 1;
    }
    free(i2c_data.msgs);
    close(fd);

#if 1
    int i;
    printf("i2c__read 0x%02x:",buftmp[0]);
    for (i = 0; i < ByteNo; i++)
    {
    printf(" 0x%02x",buff[i]);
    }
    printf("\n");
#endif

    return 0;
}

/*****************************************************************************
  i2c写函数，参数1：从设备地址，参数2：寄存器地址，参数3：要写入的数据缓冲区，参数4：写入数据大小
******************************************************************************/
unsigned char _i2c_write(unsigned char device_addr, unsigned char sub_addr, unsigned char *buff, int ByteNo)
{
    int fd, ret;
    unsigned char buftmp[32];
    struct i2c_rdwr_ioctl_data i2c_data;
    const char      *i2c_dev = "/dev/i2c-0";
    // ----------------------------------

    device_addr >>= 1;
    // init
    fd = open(i2c_dev, O_RDWR);
    if (fd < 0)
    {
        printf("not have /dev/i2c-0\r\n");
        return -1;
    }

    i2c_data.nmsgs = 1;
    i2c_data.msgs = (struct i2c_msg *)malloc(i2c_data.nmsgs *sizeof(struct i2c_msg));
    if (i2c_data.msgs == NULL)
    {
        printf("malloc error");
        close(fd);
        return -1;
    }

    ioctl(fd, I2C_TIMEOUT, 1);
    ioctl(fd, I2C_RETRIES, 2);

    memset(buftmp, 0, 32);
    buftmp[0] = sub_addr;
    memcpy(buftmp + 1, buff, ByteNo);
    i2c_data.msgs[0].len = ByteNo + 1;;
    i2c_data.msgs[0].addr = device_addr;
    i2c_data.msgs[0].flags = 0;     //  0: write 1:read
    i2c_data.msgs[0].buf = buftmp;
    ret = ioctl(fd, I2C_RDWR, (unsigned long)&i2c_data);
    if (ret < 0)
    {
        printf("write reg %x %x error\r\n", device_addr, sub_addr);
        close(fd);
        free(i2c_data.msgs);
        return 1;
    }
    free(i2c_data.msgs);
    close(fd);

#if 1
    int i;
    printf("i2c_write 0x%02x:",buftmp[0]);
    for(i=0; i<ByteNo; i++)
    {
    printf(" 0x%02x",buftmp[1+i]);
    }
    printf("\n");
#endif
    return 0;
}





